// Generated by gencpp from file mini/StatusRequest.msg
// DO NOT EDIT!


#ifndef MINI_MESSAGE_STATUSREQUEST_H
#define MINI_MESSAGE_STATUSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mini
{
template <class ContainerAllocator>
struct StatusRequest_
{
  typedef StatusRequest_<ContainerAllocator> Type;

  StatusRequest_()
    : get_status(0)  {
    }
  StatusRequest_(const ContainerAllocator& _alloc)
    : get_status(0)  {
  (void)_alloc;
    }



   typedef uint8_t _get_status_type;
  _get_status_type get_status;





  typedef boost::shared_ptr< ::mini::StatusRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mini::StatusRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StatusRequest_

typedef ::mini::StatusRequest_<std::allocator<void> > StatusRequest;

typedef boost::shared_ptr< ::mini::StatusRequest > StatusRequestPtr;
typedef boost::shared_ptr< ::mini::StatusRequest const> StatusRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mini::StatusRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mini::StatusRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mini::StatusRequest_<ContainerAllocator1> & lhs, const ::mini::StatusRequest_<ContainerAllocator2> & rhs)
{
  return lhs.get_status == rhs.get_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mini::StatusRequest_<ContainerAllocator1> & lhs, const ::mini::StatusRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mini

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mini::StatusRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mini::StatusRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mini::StatusRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mini::StatusRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mini::StatusRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mini::StatusRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mini::StatusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4dd1aa84b07741a714357c84f9e0c18";
  }

  static const char* value(const ::mini::StatusRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4dd1aa84b07741aULL;
  static const uint64_t static_value2 = 0x714357c84f9e0c18ULL;
};

template<class ContainerAllocator>
struct DataType< ::mini::StatusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mini/StatusRequest";
  }

  static const char* value(const ::mini::StatusRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mini::StatusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Possible values for get_status\n"
"# uint8 GET_STATUS_VEHICLE_STATE = 0\n"
"# uint8 GET_STATUS_CONTROL_MODE = 1\n"
"# uint8 GET_STATUS_BATTERY_VOLTAGE = 2\n"
"# uint8 GET_STATUS_ERROR_CODE = 3\n"
"# uint8 GET_STATUS_MOTION_MODE = 4\n"
"\n"
"# request\n"
"uint8 get_status\n"
;
  }

  static const char* value(const ::mini::StatusRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mini::StatusRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.get_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StatusRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mini::StatusRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mini::StatusRequest_<ContainerAllocator>& v)
  {
    s << indent << "get_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.get_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MINI_MESSAGE_STATUSREQUEST_H
